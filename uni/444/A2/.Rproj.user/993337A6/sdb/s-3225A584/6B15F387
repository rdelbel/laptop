{
    "contents" : "px<-function(x)\n  print.xtable(xtable(x),include.rownames=F,table.placement=\"H\",sanitize.text.function=identity)\n\n#'Make Rplink.txt file\n#'\n#'Makes Rplink.txt file for fash coxph gwas. \n#'#'Any element of the outcome,strata, or null vectors will correspond to either \n#'the column index (not including the 2 id columns) or column name of the \n#'corresponding covaraite in the covar.txt file. Any element of these vectors will \n#'be treated as an index if it consists of the digits 0-9 and will be considered\n#'a column name otherwise. Even if you input an element as \"101\" (with quotes) it will\n#'be treated as an index to the 101th column not the column name 101. Only one stratification\n#'variable can be used. If you want to use more than one, create a variable that incorporates all of\n#'the strata in one column. \n#'\n#'@param outcome length 2 vector corresponding to time and status\n#'@param covariates vector corresponding to confounding factors. Default\n#'(no covariates) is NULL\n#'@param strata vector corresponding to stratification variable. Default\n#'(no strata) is NULL. \n#'@param mcore Dont use this\n#'@param fout string corresponding to the directory you want to output the \n#'@param kind additive/dominant/recessive\n#'Rplink.R file. Default (write to working directory) is NULL.\n#'@export\n#'@import xtable stringr\nmakeRplink<-function(outcome,covariates=NULL,strata=NULL,mcore=F,fout=NULL,kind=\"additive\"){  \n  makeRplinkinput<-function(x){\n    if(is.null(x)) return(NULL)\n    x<-as.character(x)\n    sapply(x,function(y){\n      z<-gsub(\"[0-9]\",\"\",y)\n      if(nchar(z)==0)\n        return(y)\n      return(which(covarnames==y))           \n    })}\n  if(kind==\"additive\"){\n    snptxt=\"snp<-as.double(snp[sorted])\"\n  }else if(kind==\"dominant\"){\n    snptxt=\"snp<-ifelse(as.double(snp[sorted])==0,0,1)\"\n  }else if(kind==\"recessive\"){\n    snptxt=\"snp<-ifelse(as.double(snp[sorted])==2,1,0)\"    \n  }\n  covarnames<-names(read.table(\"covar.txt\",header=T))[-c(1,2)]\n  outcome<-makeRplinkinput(outcome)\n  strata<-makeRplinkinput(strata)\n  covariates<-makeRplinkinput(covariates)\n  snpstext=ifelse(!is.null(covariates),'cbind(snp,X)','snp')  \n  subsnpstext=ifelse(!is.null(covariates),'cbind(snp[nm],X[nm,])','snp[nm]')    \n  subnewstratatext=ifelse(!is.null(strata),'as.integer(c(1 * (diff(as.numeric(strata[nm])) !=0), 1))','newstrata[nm]')\n  outapply=ifelse(mcore,\"t(do.call(rbind,mclapply(as.list(data.frame(GENO)),f1)))\",\n                  \"apply(GENO,2,f1)\")\n  a4<-''\n  a1<-paste0('require(survival)\n             require(multicore)\n             Rplink<-function(PHENO,GENO,CLUSTER,COVAR){\n             time<-COVAR[,',outcome[1],']\n             nn=length(time)')\n  if(!is.null(strata)){\n    a2<-paste0('strata<-COVAR[,',strata,']\n               sorted <- order(strata, time)\n               strata <- strata[sorted]\n               newstrata<-as.integer(c(1 * (diff(as.numeric(strata)) !=0), 1))')\n  }else{\n    a2<-'sorted<-order(time)\n    newstrata<-as.integer(rep(0,nn))'\n  }\n  a3<-paste0('time<-time[sorted]\n             status<-as.integer(COVAR[sorted,',outcome[2],'])')\n  if(!is.null(covariates)){\n    a4<-paste0('X<-COVAR[sorted,',paste0(\"c(\",paste(covariates,collapse=\",\"),\")\"),',drop=F]\n               init=rep(0,ncol(X)+1)')\n  }\n  a5<-paste0('alpha=qnorm(.975)\n             nn=length(time)\n             offset<-rep(0,nn)\n             weights<-rep(1,nn)')  \n  \n  a6<-paste0('f1<-function(snp)\n{\n             ',snptxt,'\n             nm<-which(!is.na(snp))    \n             if(length(nm)==nn){\n             model<-.Call(\"coxfit6\", 20L, time, status,\n             ',snpstext,',\n             offset,weights,\n             newstrata,\n             1L,1e-09, 1.818989e-12,\n             init,\n             1L)\n             }else{   \n             model<-.Call(\"coxfit6\", 20L, time[nm], status[nm],\n             ',subsnpstext,',\n             offset[nm],weights[nm],\n             ',subnewstratatext,',\n             1L,1e-09, 1.818989e-12,\n             init,\n             1L)\n             }\n             coef=model$coef[1]\n             var=model$imat[1]\n             if(any(model$flag==1000,abs(coef)>10,coef==0)){\n             r<-rep(NA,4)\n             }else{      \n             r<-c(exp(c(coef,coef-alpha*sqrt(var),coef+alpha*sqrt(var))),\n             1-pchisq(coef^2/var,1))\n             }\n             c(4,r)\n}\n             ',outapply,'\n  }')\na<-paste(a1,a2,a3,a4,a5,a6,sep=\"\\n\")\n\nif(!is.null(fout)){\n  oldwd<-getwd()\n  setwd(fout)\n  sink(\"Rplink.R\")\n  cat(a)\n  sink()\n  setwd(oldwd)\n}else{\n  sink(\"Rplink.R\")\n  cat(a)\n  sink()\n}  \n}\n\n\n#'Fit genetic models\n#'\n#'Fit genetic models. Currently can only fit coxph models\n#'\n#'@param id dataframe with 2 columns corresponding to the id in the .fam plink file\n#'@param outcome dataframe of outcomes\n#'@param covariates dataframe of covaraites. Default is NULL for no covariates\n#'@param strata vector of statification membership status. Works only with coxph.\n#'@param covariates vector corresponding to confounding factors. Default\n#'(no covariates) is NULL\n#'@param type Type of analysis to do. Must be one of \"linear\", \"logistic\", \"coxph\".\n#'@param kind additive/dominant/recessive\n#'@param mcore Dont use this\n#'@param fout string corresponding to the directory you want to output the \n#'Rplink.R file. Default (write to working directory) is NULL.\n#'@export\nGENfit<-function(id,outcome,covariates=NULL,strata=NULL,type,kind=\"additive\",ifile=\"GENmatic\",ofile=\"GENmatic\",summarize=F,...){\n  if(!type%in%c(\"coxph\",\"logistic\",\"linear\"))\n    stop(\"type must be coxph, logistic, or linear\")\n  if(type==\"coxph\"){\n    numbers=make_covar_pheno(type,id,outcome,covariates,strata,call=T)    \n    makeRplink(1:2,numbers[[1]],numbers[[2]],F,NULL,kind)\n    require(Rserve)\n    Rserve(args=\"--no-save\")\n    system(paste0(\"plink --noweb --bfile \",ifile,\" --covar covar.txt --pheno pheno.txt --R Rplink.R --out \",ofile))\n    filename=paste0(ofile,\".auto.R\")    \n  }else if(type==\"logistic\"){\n    make_covar_pheno(type,id,outcome,covariates,strata) \n    if(is.null(covariates)){\n      system(paste0(\"plink --noweb --bfile \",ifile,\" --pheno pheno.txt --assoc --ci 0.95  --out \",ofile))\n      filename=paste0(ofile,\".assoc\")\n    }    \n    else{\n      system(paste0(\"plink --noweb --bfile \",ifile,\" --covar covar.txt --pheno pheno.txt --logistic --ci 0.95 --hide-covar --out \",ofile))\n      filename=paste0(ofile,\".assoc.logistic\")\n    }\n  }else if(type==\"linear\"){\n    make_covar_pheno(type,id,outcome,covariates,strata) \n    if(is.null(covariates)){\n      system(paste0(\"plink --noweb --bfile \",ifile,\" --pheno pheno.txt --assoc --ci 0.95  --out \",ofile))\n      filename=paste0(ofile,\".assoc\")\n    }\n    else{\n      system(paste0(\"plink --noweb --bfile \",ifile,\" --covar covar.txt --pheno pheno.txt --linear --ci 0.95 --hide-covar --out \",ofile))\n      filename=paste0(ofile,\".assoc.linear\")\n    }\n  }\n  if(type==\"coxph\"){\n    temp=read.table(filename,stringsAsFactors=F)\n    colnames(temp)=c(\"CHR\",\"SNP\",\"BP\",\"A1\",\"HR\",\"L95\",\"U95\",\"P\")\n  }else{\n    temp=read.table(filename,stringsAsFactors=F,head=T)\n  }\n  si=snpinfo(ifile)\n  a=merge(si,temp[,!colnames(temp)%in%c(\"A1\",\"A2\",\"TEST\")],by=\"SNP\",check.names = FALSE)\n  t1=which(colnames(a)==\"CHR\")\n  t2=which(colnames(a)==\"BP\")\n  a=a[,c(t1,1,t2,setdiff(1:ncol(a),c(1,t1,t2)))]    \n  write.table(a,filename,row.names=F,quote=F)  \n  if(summarize){\n    manhattan(filename)\n    qq(filename)\n    topsnps(filename,ofile,...)\n  }\n}\n\n\n#'Make covariate file and phenotype file\n#'\n#'Make covariate file and phenotype file. These files can be made seperate if necessary, but will always be made via GENfit call\n#'\n#'@param type What kind of model you want to make the files for. Currently can use coxph, linear, logistic\n#'@param id datframe corresponding to the 2 column id used in the .fam file\n#'@param dataframe of covariates wanted in the model. Do not include intercept term. Make sure all factors are actually factors\n#'@param strata vector of stratification status. Only applicable for coxph\n#'@param cname name of outputed covar file. Default is covar\n#'@param pname name of outputed phenotype file. Default is pheno\n\nmake_covar_pheno<-function(type,id,outcome,covar=NULL,strata=NULL,cname=\"covar\",pname=\"pheno\",call=F){\n  if(!type%in%c(\"coxph\",\"logistic\",\"linear\"))\n    stop(\"Type must be coxph, logistic, linear\")\n  if(type!=\"coxph\"&&!is.null(strata))\n    stop(\"strata can only be defined for coxph\")  \n  C=is.null(covar)\n  S=is.null(strata)\n  nstrat=NULL\n  numcov=NULL\n  if(!C){\n    if(length(which(covar==-9)!=0))\n      stop(\"Data can not have any -9 values when using plink\")\n    covar=data.frame(covar)\n  }\n  if(type==\"coxph\"){\n    pheno=cbind(id,1)\n    if(!C&&!S){\n      cov=model.matrix(~.,model.frame(~.,covar,na.action=NULL))[,-1,drop=F]\n      numcov=3:(ncol(cov)+2)\n      nstrat=ncol(cov)+3\n      data=cbind(id,outcome,cov,strata)\n    }else if(C){      \n      nstrat=3\n      data=cbind(id,outcome,strata)\n    }else if(S){\n      cov=model.matrix(~.,model.frame(~.,covar,na.action=NULL))[,-1,drop=F]\n      numcov=3:(ncol(cov)+2)\n      data=cbind(id,outcome,cov)\n    }else{\n      data=cbind(id,outcome)\n    }\n    data[is.na(data)]=-9\n    write.table(data,paste0(cname,\".txt\"),quote=F,row.names=F)\n    write.table(pheno,paste0(pname,\".txt\"),quote=F,row.names=F,col.names=F)\n    if(call){\n      return(list(numcov,nstrat))\n    }\n  }\n  else if(type==\"logistic\"){\n    ma=which(outcome==max(outcome))\n    mi=setdiff(setdiff(1:length(outcome),ma),which(outcome==-9))    \n    outcome[ma]=2\n    outcome[mi]=1\n    pheno=cbind(id,outcome)\n    if(!C){\n      cov=model.matrix(~.,model.frame(~.,covar,na.action=NULL))[,-1,drop=F]\n      write.table(data.frame(id,cov),paste0(cname,\".txt\"),quote=F,row.names=F)    \n    }\n    write.table(pheno,paste0(pname,\".txt\"),quote=F,row.names=F,col.names=F)\n  }else{\n    if(length(which(outcome==-9))!=0)\n      stop(\"Can not use outcome with -9 in plink\")\n    if(!C){\n      cov=model.matrix(~.,model.frame(~.,covar,na.action=NULL))[,-1,drop=F]\n      write.table(data.frame(id,cov),paste0(cname,\".txt\"),quote=F,row.names=F)    \n    }\n    pheno=cbind(id,outcome)\n    write.table(pheno,paste0(pname,\".txt\"),quote=F,row.names=F,col.names=F)\n  }\n} \n\nqq<-function(ifile,...){\n  results=read.table(ifile,head=T)\n  obs=sort(results[,\"P\"],decreasing=F)\n  ept=c(1:length(obs))/(length(obs))\n  plot(-log10(ept),-log10(obs),col=4,xlab=\"Expected -log10(pvalue)\",ylab=\"Observed -log10(pvalue)\",...)\n  abline(0,1,col=\"red\")\n}\n\nmanhattan<-function(ifile,title=\"Manhattan Plot\",...){\n  gwas<-read.table(ifile,header=T)\n  d<-gwas[complete.cases(gwas),c(\"CHR\", \"BP\",\"P\")]\n  \n  ord <- order(d$CHR,d$BP)\n  d <- d[ord,]\n  top=ceiling(-log10(min(d[,\"P\"])))\n  colors <- c(rep(c(\"blue\",\"red\"),15),\"red\")\n  oldpar<-par()\n  par(cex=0.6)\n  mhtplot(d,control=mht.control(colors=colors,gap=1000),pch=19,srt=0,ylim=c(0,top),...)\n  axis(2,cex.axis=2)\n  title(title)\n  #sline<--log10(3.60036E-05)\n  #gline<--log10(1.8E-06)\n  #abline(h=sline,col=\"blue\")\n  #abline(h=gline,col=\"green\")\n  abline(h=0)\n}\n\nsnpinfo<-function(ifile){\n  system(paste0(\"plink --noweb --bfile \",ifile,\" --freq --out \",ifile))\n  system(paste0(\"plink --noweb --bfile \",ifile,\" --hardy --out \",ifile))\n  f=read.table(paste0(ifile,\".frq\"),stringsAsFactors=F,head=T)\n  h=read.table(paste0(ifile,\".hwe\"),stringsAsFactors=F,head=T)\n  h=h[h$TEST==\"ALL\",!colnames(h)%in%c(\"A1\",\"A2\",\"CHR\")]\n  fh=merge(f,h,\"SNP\")\n  colnames(fh)[which(colnames(fh)==\"P\")]=\"HWE.P\"\n  fh=fh[,!colnames(fh)%in%c(\"TEST\",\"CHR\")]\n}\n\n\npts<-function(data){\n  xt=xtable(data)\n  digits(xt)=c(rep(2,ncol(data)),8)\n  print.xtable(xt,include.rownames=F,table.placement=\"H\")\n}\n\ntopsnps<-function(ifile,ofile=NULL,n=0,proportion=0,cutoff=0){\n  if(is.null(ofile))\n    ofile=ifile\n  if(length(which(c(n,proportion,cutoff)==0))!=2)\n    stop(\"Please only declare one of n, proportion, cutoff\")\n  data=read.table(ifile,header=T,stringsAsFactors=F)\n  ord=order(data[,\"P\"],decreasing=F)\n  temp=which(colnames(data)==\"P\")\n  data=data[ord,c(setdiff(1:ncol(data),temp),temp)]\n  if(n!=0){\n    write.csv(data[1:n,],paste0(ofile,\"topsnps.csv\"),row.names=F,quote=F)    \n  }else if(proportion!=0){\n    write.csv(data[1:ceiling(nrow(data)*proportion),],paste0(ofile,\"topsnps.csv\"),row.names=F,quote=F)\n  }else if(cutoff!=0){\n    write.csv(data[which(data[,\"P\"]<=cutoff),],paste0(ofile,\"topsnps.csv\"),row.names=F,quote=F)\n    \n  }\n}\n",
    "created" : 1393803359624.000,
    "dirty" : false,
    "encoding" : "",
    "folds" : "26|92|125|0|\n",
    "hash" : "3103338986",
    "id" : "6B15F387",
    "lastKnownWriteTime" : 45417840,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}