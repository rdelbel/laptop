var=model$imat[1]
if(any(model$flag==1000,abs(coef)>10,coef==0)){
r<-rep(NA,4)
}else{
r<-c(exp(c(coef,coef-alpha*sqrt(var),coef+alpha*sqrt(var))),
1-pchisq(coef^2/var,1))
}
c(4,r)
}
',outapply,'
}')
a<-paste(a1,a2,a3,a4,a5,a6,sep="\n")
if(!is.null(fout)){
oldwd<-getwd()
setwd(fout)
sink("Rplink.R")
cat(a)
sink()
setwd(oldwd)
}else{
sink("Rplink.R")
cat(a)
sink()
}
}
#'Fit genetic models
#'
#'Fit genetic models. Currently can only fit coxph models
#'
#'@param id dataframe with 2 columns corresponding to the id in the .fam plink file
#'@param outcome dataframe of outcomes
#'@param covariates dataframe of covaraites. Default is NULL for no covariates
#'@param strata vector of statification membership status. Works only with coxph.
#'@param covariates vector corresponding to confounding factors. Default
#'(no covariates) is NULL
#'@param type Type of analysis to do. Must be one of "linear", "logistic", "coxph".
#'@param kind additive/dominant/recessive
#'@param mcore Dont use this
#'@param fout string corresponding to the directory you want to output the
#'Rplink.R file. Default (write to working directory) is NULL.
#'@export
GENfit<-function(id,outcome,covariates=NULL,strata=NULL,type,kind="additive",ifile="GENmatic",ofile="GENmatic",summarize=F,...){
if(!type%in%c("coxph","logistic","linear"))
stop("type must be coxph, logistic, or linear")
if(type=="coxph"){
numbers=make_covar_pheno(type,id,outcome,covariates,strata,call=T)
makeRplink(1:2,numbers[[1]],numbers[[2]],F,NULL,kind)
require(Rserve)
Rserve(args="--no-save")
system(paste0("plink --noweb --bfile ",ifile," --covar covar.txt --pheno pheno.txt --R Rplink.R --out ",ofile))
filename=paste0(ofile,".auto.R")
}else if(type=="logistic"){
make_covar_pheno(type,id,outcome,covariates,strata)
if(is.null(covariates)){
system(paste0("plink --noweb --bfile ",ifile," --pheno pheno.txt --assoc --ci 0.95  --out ",ofile))
filename=paste0(ofile,".assoc")
}
else{
system(paste0("plink --noweb --bfile ",ifile," --covar covar.txt --pheno pheno.txt --logistic --ci 0.95 --hide-covar --out ",ofile))
filename=paste0(ofile,".assoc.logistic")
}
}else if(type=="linear"){
make_covar_pheno(type,id,outcome,covariates,strata)
if(is.null(covariates)){
system(paste0("plink --noweb --bfile ",ifile," --pheno pheno.txt --assoc --ci 0.95  --out ",ofile))
filename=paste0(ofile,".assoc")
}
else{
system(paste0("plink --noweb --bfile ",ifile," --covar covar.txt --pheno pheno.txt --linear --ci 0.95 --hide-covar --out ",ofile))
filename=paste0(ofile,".assoc.linear")
}
}
if(type=="coxph"){
temp=read.table(filename,stringsAsFactors=F)
colnames(temp)=c("CHR","SNP","BP","A1","HR","L95","U95","P")
}else{
temp=read.table(filename,stringsAsFactors=F,head=T)
}
si=snpinfo(ifile)
a=merge(si,temp[,!colnames(temp)%in%c("A1","A2","TEST")],by="SNP",check.names = FALSE)
t1=which(colnames(a)=="CHR")
t2=which(colnames(a)=="BP")
a=a[,c(t1,1,t2,setdiff(1:ncol(a),c(1,t1,t2)))]
write.table(a,filename,row.names=F,quote=F)
if(summarize){
manhattan(filename)
qq(filename)
topsnps(filename,ofile,...)
}
}
GENfit(ESO[,c("nlab","nlab")],ESO[,c("SvRfs","Rfs")],ESO[c("Larynx","STAD1","PC1","PC2","PC3")],"dominant",ifile="data",type="coxph",summarize=T,n=100)
px<-function(x)
print.xtable(xtable(x),include.rownames=F,table.placement="H",sanitize.text.function=identity)
#'Make Rplink.txt file
#'
#'Makes Rplink.txt file for fash coxph gwas.
#'#'Any element of the outcome,strata, or null vectors will correspond to either
#'the column index (not including the 2 id columns) or column name of the
#'corresponding covaraite in the covar.txt file. Any element of these vectors will
#'be treated as an index if it consists of the digits 0-9 and will be considered
#'a column name otherwise. Even if you input an element as "101" (with quotes) it will
#'be treated as an index to the 101th column not the column name 101. Only one stratification
#'variable can be used. If you want to use more than one, create a variable that incorporates all of
#'the strata in one column.
#'
#'@param outcome length 2 vector corresponding to time and status
#'@param covariates vector corresponding to confounding factors. Default
#'(no covariates) is NULL
#'@param strata vector corresponding to stratification variable. Default
#'(no strata) is NULL.
#'@param mcore Dont use this
#'@param fout string corresponding to the directory you want to output the
#'@param kind additive/dominant/recessive
#'Rplink.R file. Default (write to working directory) is NULL.
#'@export
#'@import xtable stringr
makeRplink<-function(outcome,covariates=NULL,strata=NULL,mcore=F,fout=NULL,kind="additive"){
makeRplinkinput<-function(x){
if(is.null(x)) return(NULL)
x<-as.character(x)
sapply(x,function(y){
z<-gsub("[0-9]","",y)
if(nchar(z)==0)
return(y)
return(which(covarnames==y))
})}
if(kind=="additive"){
snptxt="snp<-as.double(snp[sorted])"
}else if(kind=="dominant"){
snptxt="snp<-ifelse(as.double(snp[sorted])==0,0,1)"
}else if(kind=="recessive"){
snptxt="snp<-ifelse(as.double(snp[sorted])==2,1,0)"
}
covarnames<-names(read.table("covar.txt",header=T))[-c(1,2)]
outcome<-makeRplinkinput(outcome)
strata<-makeRplinkinput(strata)
covariates<-makeRplinkinput(covariates)
snpstext=ifelse(!is.null(covariates),'cbind(snp,X)','snp')
subsnpstext=ifelse(!is.null(covariates),'cbind(snp[nm],X[nm,])','snp[nm]')
subnewstratatext=ifelse(!is.null(strata),'as.integer(c(1 * (diff(as.numeric(strata[nm])) !=0), 1))','newstrata[nm]')
outapply=ifelse(mcore,"t(do.call(rbind,mclapply(as.list(data.frame(GENO)),f1)))",
"apply(GENO,2,f1)")
a4<-''
a1<-paste0('require(survival)
require(multicore)
Rplink<-function(PHENO,GENO,CLUSTER,COVAR){
time<-COVAR[,',outcome[1],']
nn=length(time)')
if(!is.null(strata)){
a2<-paste0('strata<-COVAR[,',strata,']
sorted <- order(strata, time)
strata <- strata[sorted]
newstrata<-as.integer(c(1 * (diff(as.numeric(strata)) !=0), 1))')
}else{
a2<-'sorted<-order(time)
newstrata<-as.integer(rep(0,nn))'
}
a3<-paste0('time<-time[sorted]
status<-as.integer(COVAR[sorted,',outcome[2],'])')
if(!is.null(covariates)){
a4<-paste0('X<-COVAR[sorted,',paste0("c(",paste(covariates,collapse=","),")"),',drop=F]
init=rep(0,ncol(X)+1)')
}
a5<-paste0('alpha=qnorm(.975)
nn=length(time)
offset<-rep(0,nn)
weights<-rep(1,nn)')
a6<-paste0('f1<-function(snp)
{
',snp<-as.double(snp[sorted]),'
nm<-which(!is.na(snp))
if(length(nm)==nn){
model<-.Call("coxfit6", 20L, time, status,
',snpstext,',
offset,weights,
newstrata,
1L,1e-09, 1.818989e-12,
init,
1L)
}else{
model<-.Call("coxfit6", 20L, time[nm], status[nm],
',subsnpstext,',
offset[nm],weights[nm],
',subnewstratatext,',
1L,1e-09, 1.818989e-12,
init,
1L)
}
coef=model$coef[1]
var=model$imat[1]
if(any(model$flag==1000,abs(coef)>10,coef==0)){
r<-rep(NA,4)
}else{
r<-c(exp(c(coef,coef-alpha*sqrt(var),coef+alpha*sqrt(var))),
1-pchisq(coef^2/var,1))
}
c(4,r)
}
',outapply,'
}')
a<-paste(a1,a2,a3,a4,a5,a6,sep="\n")
if(!is.null(fout)){
oldwd<-getwd()
setwd(fout)
sink("Rplink.R")
cat(a)
sink()
setwd(oldwd)
}else{
sink("Rplink.R")
cat(a)
sink()
}
}
#'Fit genetic models
#'
#'Fit genetic models. Currently can only fit coxph models
#'
#'@param id dataframe with 2 columns corresponding to the id in the .fam plink file
#'@param outcome dataframe of outcomes
#'@param covariates dataframe of covaraites. Default is NULL for no covariates
#'@param strata vector of statification membership status. Works only with coxph.
#'@param covariates vector corresponding to confounding factors. Default
#'(no covariates) is NULL
#'@param type Type of analysis to do. Must be one of "linear", "logistic", "coxph".
#'@param kind additive/dominant/recessive
#'@param mcore Dont use this
#'@param fout string corresponding to the directory you want to output the
#'Rplink.R file. Default (write to working directory) is NULL.
#'@export
GENfit<-function(id,outcome,covariates=NULL,strata=NULL,type,kind="additive",ifile="GENmatic",ofile="GENmatic",summarize=F,...){
if(!type%in%c("coxph","logistic","linear"))
stop("type must be coxph, logistic, or linear")
if(type=="coxph"){
numbers=make_covar_pheno(type,id,outcome,covariates,strata,call=T)
makeRplink(1:2,numbers[[1]],numbers[[2]],F,NULL,kind)
require(Rserve)
Rserve(args="--no-save")
system(paste0("plink --noweb --bfile ",ifile," --covar covar.txt --pheno pheno.txt --R Rplink.R --out ",ofile))
filename=paste0(ofile,".auto.R")
}else if(type=="logistic"){
make_covar_pheno(type,id,outcome,covariates,strata)
if(is.null(covariates)){
system(paste0("plink --noweb --bfile ",ifile," --pheno pheno.txt --assoc --ci 0.95  --out ",ofile))
filename=paste0(ofile,".assoc")
}
else{
system(paste0("plink --noweb --bfile ",ifile," --covar covar.txt --pheno pheno.txt --logistic --ci 0.95 --hide-covar --out ",ofile))
filename=paste0(ofile,".assoc.logistic")
}
}else if(type=="linear"){
make_covar_pheno(type,id,outcome,covariates,strata)
if(is.null(covariates)){
system(paste0("plink --noweb --bfile ",ifile," --pheno pheno.txt --assoc --ci 0.95  --out ",ofile))
filename=paste0(ofile,".assoc")
}
else{
system(paste0("plink --noweb --bfile ",ifile," --covar covar.txt --pheno pheno.txt --linear --ci 0.95 --hide-covar --out ",ofile))
filename=paste0(ofile,".assoc.linear")
}
}
if(type=="coxph"){
temp=read.table(filename,stringsAsFactors=F)
colnames(temp)=c("CHR","SNP","BP","A1","HR","L95","U95","P")
}else{
temp=read.table(filename,stringsAsFactors=F,head=T)
}
si=snpinfo(ifile)
a=merge(si,temp[,!colnames(temp)%in%c("A1","A2","TEST")],by="SNP",check.names = FALSE)
t1=which(colnames(a)=="CHR")
t2=which(colnames(a)=="BP")
a=a[,c(t1,1,t2,setdiff(1:ncol(a),c(1,t1,t2)))]
write.table(a,filename,row.names=F,quote=F)
if(summarize){
manhattan(filename)
qq(filename)
topsnps(filename,ofile,...)
}
}
#'Make covariate file and phenotype file
#'
#'Make covariate file and phenotype file. These files can be made seperate if necessary, but will always be made via GENfit call
#'
#'@param type What kind of model you want to make the files for. Currently can use coxph, linear, logistic
#'@param id datframe corresponding to the 2 column id used in the .fam file
#'@param dataframe of covariates wanted in the model. Do not include intercept term. Make sure all factors are actually factors
#'@param strata vector of stratification status. Only applicable for coxph
#'@param cname name of outputed covar file. Default is covar
#'@param pname name of outputed phenotype file. Default is pheno
make_covar_pheno<-function(type,id,outcome,covar=NULL,strata=NULL,cname="covar",pname="pheno",call=F){
if(!type%in%c("coxph","logistic","linear"))
stop("Type must be coxph, logistic, linear")
if(type!="coxph"&&!is.null(strata))
stop("strata can only be defined for coxph")
C=is.null(covar)
S=is.null(strata)
nstrat=NULL
numcov=NULL
if(!C){
if(length(which(covar==-9)!=0))
stop("Data can not have any -9 values when using plink")
covar=data.frame(covar)
}
if(type=="coxph"){
pheno=cbind(id,1)
if(!C&&!S){
cov=model.matrix(~.,model.frame(~.,covar,na.action=NULL))[,-1,drop=F]
numcov=3:(ncol(cov)+2)
nstrat=ncol(cov)+3
data=cbind(id,outcome,cov,strata)
}else if(C){
nstrat=3
data=cbind(id,outcome,strata)
}else if(S){
cov=model.matrix(~.,model.frame(~.,covar,na.action=NULL))[,-1,drop=F]
numcov=3:(ncol(cov)+2)
data=cbind(id,outcome,cov)
}else{
data=cbind(id,outcome)
}
data[is.na(data)]=-9
write.table(data,paste0(cname,".txt"),quote=F,row.names=F)
write.table(pheno,paste0(pname,".txt"),quote=F,row.names=F,col.names=F)
if(call){
return(list(numcov,nstrat))
}
}
else if(type=="logistic"){
ma=which(outcome==max(outcome))
mi=setdiff(setdiff(1:length(outcome),ma),which(outcome==-9))
outcome[ma]=2
outcome[mi]=1
pheno=cbind(id,outcome)
if(!C){
cov=model.matrix(~.,model.frame(~.,covar,na.action=NULL))[,-1,drop=F]
write.table(data.frame(id,cov),paste0(cname,".txt"),quote=F,row.names=F)
}
write.table(pheno,paste0(pname,".txt"),quote=F,row.names=F,col.names=F)
}else{
if(length(which(outcome==-9))!=0)
stop("Can not use outcome with -9 in plink")
if(!C){
cov=model.matrix(~.,model.frame(~.,covar,na.action=NULL))[,-1,drop=F]
write.table(data.frame(id,cov),paste0(cname,".txt"),quote=F,row.names=F)
}
pheno=cbind(id,outcome)
write.table(pheno,paste0(pname,".txt"),quote=F,row.names=F,col.names=F)
}
}
qq<-function(ifile,...){
results=read.table(ifile,head=T)
obs=sort(results[,"P"],decreasing=F)
ept=c(1:length(obs))/(length(obs))
plot(-log10(ept),-log10(obs),col=4,xlab="Expected -log10(pvalue)",ylab="Observed -log10(pvalue)",...)
abline(0,1,col="red")
}
manhattan<-function(ifile,title="Manhattan Plot",...){
gwas<-read.table(ifile,header=T)
d<-gwas[complete.cases(gwas),c("CHR", "BP","P")]
ord <- order(d$CHR,d$BP)
d <- d[ord,]
top=ceiling(-log10(min(d[,"P"])))
colors <- c(rep(c("blue","red"),15),"red")
oldpar<-par()
par(cex=0.6)
mhtplot(d,control=mht.control(colors=colors,gap=1000),pch=19,srt=0,ylim=c(0,top),...)
axis(2,cex.axis=2)
title(title)
#sline<--log10(3.60036E-05)
#gline<--log10(1.8E-06)
#abline(h=sline,col="blue")
#abline(h=gline,col="green")
abline(h=0)
}
snpinfo<-function(ifile){
system(paste0("plink --noweb --bfile ",ifile," --freq --out ",ifile))
system(paste0("plink --noweb --bfile ",ifile," --hardy --out ",ifile))
f=read.table(paste0(ifile,".frq"),stringsAsFactors=F,head=T)
h=read.table(paste0(ifile,".hwe"),stringsAsFactors=F,head=T)
h=h[h$TEST=="ALL",!colnames(h)%in%c("A1","A2","CHR")]
fh=merge(f,h,"SNP")
colnames(fh)[which(colnames(fh)=="P")]="HWE.P"
fh=fh[,!colnames(fh)%in%c("TEST","CHR")]
}
pts<-function(data){
xt=xtable(data)
digits(xt)=c(rep(2,ncol(data)),8)
print.xtable(xt,include.rownames=F,table.placement="H")
}
topsnps<-function(ifile,ofile=NULL,n=0,proportion=0,cutoff=0){
if(is.null(ofile))
ofile=ifile
if(length(which(c(n,proportion,cutoff)==0))!=2)
stop("Please only declare one of n, proportion, cutoff")
data=read.table(ifile,header=T,stringsAsFactors=F)
ord=order(data[,"P"],decreasing=F)
temp=which(colnames(data)=="P")
data=data[ord,c(setdiff(1:ncol(data),temp),temp)]
if(n!=0){
write.csv(data[1:n,],paste0(ofile,"topsnps.csv"),row.names=F,quote=F)
}else if(proportion!=0){
write.csv(data[1:ceiling(nrow(data)*proportion),],paste0(ofile,"topsnps.csv"),row.names=F,quote=F)
}else if(cutoff!=0){
write.csv(data[which(data[,"P"]<=cutoff),],paste0(ofile,"topsnps.csv"),row.names=F,quote=F)
}
}
GENfit(ESO[,c("nlab","nlab")],ESO[,c("SvRfs","Rfs")],ESO[c("Larynx","STAD1","PC1","PC2","PC3")],"dominant",ifile="data",type="coxph",summarize=T,n=100)
setwd("~/pm/packages/GENmatic/testing/cleaned data")
ESO=read.csv("clinical.csv")
GENfit(ESO[,c("nlab","nlab")],ESO[,c("SvRfs","Rfs")],ESO[c("Larynx","STAD1","PC1","PC2","PC3")],"dominant",ifile="data",type="coxph",summarize=T,n=100)
makeRplink<-function(outcome,covariates=NULL,strata=NULL,mcore=F,fout=NULL,kind="additive"){
makeRplinkinput<-function(x){
if(is.null(x)) return(NULL)
x<-as.character(x)
sapply(x,function(y){
z<-gsub("[0-9]","",y)
if(nchar(z)==0)
return(y)
return(which(covarnames==y))
})}
if(kind=="additive"){
snptxt="snp<-as.double(snp[sorted])"
}else if(kind=="dominant"){
snptxt="snp<-ifelse(as.double(snp[sorted])==0,0,1)"
}else if(kind=="recessive"){
snptxt="snp<-ifelse(as.double(snp[sorted])==2,1,0)"
}
covarnames<-names(read.table("covar.txt",header=T))[-c(1,2)]
outcome<-makeRplinkinput(outcome)
strata<-makeRplinkinput(strata)
covariates<-makeRplinkinput(covariates)
snpstext=ifelse(!is.null(covariates),'cbind(snp,X)','snp')
subsnpstext=ifelse(!is.null(covariates),'cbind(snp[nm],X[nm,])','snp[nm]')
subnewstratatext=ifelse(!is.null(strata),'as.integer(c(1 * (diff(as.numeric(strata[nm])) !=0), 1))','newstrata[nm]')
outapply=ifelse(mcore,"t(do.call(rbind,mclapply(as.list(data.frame(GENO)),f1)))",
"apply(GENO,2,f1)")
a4<-''
a1<-paste0('require(survival)
require(multicore)
Rplink<-function(PHENO,GENO,CLUSTER,COVAR){
time<-COVAR[,',outcome[1],']
nn=length(time)')
if(!is.null(strata)){
a2<-paste0('strata<-COVAR[,',strata,']
sorted <- order(strata, time)
strata <- strata[sorted]
newstrata<-as.integer(c(1 * (diff(as.numeric(strata)) !=0), 1))')
}else{
a2<-'sorted<-order(time)
newstrata<-as.integer(rep(0,nn))'
}
a3<-paste0('time<-time[sorted]
status<-as.integer(COVAR[sorted,',outcome[2],'])')
if(!is.null(covariates)){
a4<-paste0('X<-COVAR[sorted,',paste0("c(",paste(covariates,collapse=","),")"),',drop=F]
init=rep(0,ncol(X)+1)')
}
a5<-paste0('alpha=qnorm(.975)
nn=length(time)
offset<-rep(0,nn)
weights<-rep(1,nn)')
a6<-paste0('f1<-function(snp)
{
',snptxt,'
nm<-which(!is.na(snp))
if(length(nm)==nn){
model<-.Call("coxfit6", 20L, time, status,
',snpstext,',
offset,weights,
newstrata,
1L,1e-09, 1.818989e-12,
init,
1L)
}else{
model<-.Call("coxfit6", 20L, time[nm], status[nm],
',subsnpstext,',
offset[nm],weights[nm],
',subnewstratatext,',
1L,1e-09, 1.818989e-12,
init,
1L)
}
coef=model$coef[1]
var=model$imat[1]
if(any(model$flag==1000,abs(coef)>10,coef==0)){
r<-rep(NA,4)
}else{
r<-c(exp(c(coef,coef-alpha*sqrt(var),coef+alpha*sqrt(var))),
1-pchisq(coef^2/var,1))
}
c(4,r)
}
',outapply,'
}')
a<-paste(a1,a2,a3,a4,a5,a6,sep="\n")
if(!is.null(fout)){
oldwd<-getwd()
setwd(fout)
sink("Rplink.R")
cat(a)
sink()
setwd(oldwd)
}else{
sink("Rplink.R")
cat(a)
sink()
}
}
GENfit(ESO[,c("nlab","nlab")],ESO[,c("SvRfs","Rfs")],ESO[c("Larynx","STAD1","PC1","PC2","PC3")],"dominant",ifile="data",type="coxph",summarize=T,n=100)
GENfit(ESO[,c("nlab","nlab")],ESO[,c("SvRfs","Rfs")],ESO[c("Larynx","STAD1","PC1","PC2","PC3")],kind="dominant",ifile="data",type="coxph",summarize=T,n=100)
1+!
1+1
